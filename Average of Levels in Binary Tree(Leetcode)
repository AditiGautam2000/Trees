/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Double> l=new ArrayList<Double>();
    
    public List<Double> averageOfLevels(TreeNode root) {
        
        if(root==null)
            return l;
         Queue<TreeNode> q= new LinkedList<>();
        
        q.add(root);
        while(!q.isEmpty())
        {
            int n=q.size();
            double s=0;
            for(int i=0;i<n;i++)
            { TreeNode t=q.remove();
            s=s+t.val;
            if(t.left!=null) q.add(t.left);
            if(t.right!=null) q.add(t.right);} 
            l.add(s/n);
        }
        return l;
        
    }
}
https://leetcode.com/submissions/detail/595787116/
