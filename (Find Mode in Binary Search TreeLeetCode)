/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
    ArrayList<Integer> a=new ArrayList<Integer>();
    public int[] findMode(TreeNode root) {
        
        
        inorder(root);
        int max=Collections.max(map.values());
        for(Map.Entry<Integer,Integer> entry:map.entrySet())
        {
            if(max==entry.getValue())
                a.add(entry.getKey());
        }
        int r[]=new int[a.size()];
        for(int i=0;i<r.length;i++)
        {
            r[i]=a.get(i);
        }
        
        return r;
        
    }
    public void inorder(TreeNode root)
    { if(root==null)
            return ;
     inorder(root.left);
      if(map.containsKey(root.val))
          map.put(root.val,map.get(root.val)+1);
     else
         map.put(root.val,0);
     
     inorder(root.right);
        
    }
    
}


https://leetcode.com/problems/find-mode-in-binary-search-tree/submissions/
