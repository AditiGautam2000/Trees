class Solution
{  static ArrayList<ArrayList<Integer>> a=new ArrayList<ArrayList<Integer>>() ;
    public static ArrayList <ArrayList <Integer>> binTreeSortedLevels (int arr[], int n)
    {  
        
             PriorityQueue<Integer> minheap=new PriorityQueue<Integer>();
             ArrayList<Integer>holder;
              ArrayList<Integer>holder1=new ArrayList<>();;
             if(arr.length==1)
             {   holder1.add(arr[0]);
             a.add(holder1);
             return a;
                         }
       
             int i=0;
             int times=1;
             
             while(i<n)
             {
                 int c=0;
                 holder=new ArrayList<>();
                 while(i<n && c<times)
                 {
                     minheap.add(arr[i]);
                     i++;
                     ++c;
                 }
                 while(!minheap.isEmpty())
                 {
                     holder.add(minheap.poll());
                 }
                 
                 times=times*2;
                 a.add(holder);}
                 return a;
                 }
    }
    
